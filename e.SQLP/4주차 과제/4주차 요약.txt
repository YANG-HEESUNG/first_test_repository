1. 파티션 개요
 . 테이블 또는 인덱스를 파티션단위로 나누어 저장하는 것
 . 파티션 키에 따라 물리적으로 별도의 세그먼트에 데이터 저장

 * 관리적 측면: 파티션 단위 백업, 추가, 삭제, 변경
 * 성능적 측면: 파티션 단위 조회 및 DML 수행, 경합 및 부하 분산

 . 보관 주기가 지난 데이터를 별도 장치에 백업하고 삭제하는  작업시 높은 효율
 . 특정 파티션만 Full Scan으로 높은 효율 가능


2. 파티션 유형
 1) Range 파티셔닝
   . 파티션 키 값의 범위(Range)로 분할
   . 파티셔닝의 가장 일반적인 형태, 주로 날짜 칼럼을 기준

2) Hash 파티셔닝
  . 파티션 키 값에 해시 함수를 적용하고, 거기서 반환된 값으로 파티션 매핑
  . 데이터가 모든 파태션에 고르게 분산되도록 DBMS가 관리 -> 각 로우의 저장위치 예측 불가
  . 파티션 키의 데이터 분포가 고른 칼럼이 효과적
  . 병렬처리시 성능 효과 극대화
  . DML경합 분산에 효과적

3) List 파티셔닝
  .불연속적인 값의 목록을 각 파티션에 지정
  .순서와 상관없이, 사용자가 미리 정한 그룹핑 기준에 따라 데이터를 분할 저장
   예) 판매 데이터를 지역별로 분할

4) Composite 파티셔닝
  .Range나 List 파티션 내에 또 다른 서브 파티션(Range, Hash, List) 구성
  .Range나 List 파티션이 갖는 이점 + 각 서브 파티션 구성의 이점


3. 파티션 구성 방법
  CREATE TABLE 매출 (매출번호 VARCHAR2(10), 매출일자 VARCHAR2(8),...)
  PARTITION BY RANGE(매출일자)
     ( PARTITION P2019_1Q VALUES LESS THAN ('20190401')
     , PARTITION P2019_1Q VALUES LESS THAN ('20190701')
     , PARTITION P2019_1Q VALUES LESS THAN ('20191001')
     , PARTITION P2019_1Q VALUES LESS THAN ('20200101')
     , PARTITION P_MAX    VALUES LESS THAN (MAXVALUE)
   );


4. 파티션 Pruning
 . 옵티마이저가 SQL의 대상 테이블과 조건절을 분석 후 불필요한 파티션을 액세스 대상에서 제외하는 기능
 . 파티션 테이블에 조회 또는DML 수행시 극적인 성능 개선을 주는 핵심 원리
 - 정적(Static) 파티션 Pruning
 - 동적(Dynamic) 파티션 Pruning


5. 파티션 Pruning -2
 . DBMS가 지능적으로수행하는 메커니즘으로, 사용자가 신경 쓰지 않아도 된다.

 . 파티션키 칼럼에 대한 가공이 발생하지 않도록 주의
 . 파티션키 칼럼 가공 및 데이터 타입이 묵시적 형 변환 시에도 정상적인 파티션 Pruning 미 작동


6.

 