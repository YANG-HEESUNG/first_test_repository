
<9.24>-1주차

1.인덱스의 구조
   -인덱스키+RowID
   -RowId구성= 데이터 블록 주소(DBA, Data Block Address)와 로우 번호   
 
2.인덱스튜닝 핵심요소
  -인덱스 스캔 과정에서 발생하는 비표율을 줄이는것
  -테이블 액세스 횟수를 줄이는것
   .인덱스 스캔 후 테이블 레커드를 액세스할 때 랜덤I/O 방식을 사용 함

3.인덱스 트리구조
  -루트(root)+브랜치(branch)+리프(leaf)
   .루트노드: 가장 상위 노드 / 하위 브랜치 노드수 만큼의 Row
   .브랜치노드: 루트와 리프의 연결고리 / 자기 하위의 Leaf Node수 만큼의 Row
   .리프노드: Key + RowId로 구성 / Key 순서대로 정렬 / 이전,이후 Leaf의 Chain

4. 인덱스 탐색 과정
   -수직적 탐색
     .인덱스 스캔 시작지점을 찾는 과정
     .Root-Branch-Leaf
     .읽고자 하는 시작점 검색
     .Random Access
   -수평적 탐색: 데이터를 찾는 과정
    .Leaf Block의 시작점 부터 종료점 까지
    .Sequential Access

5. 테이블 Access방식 비교
   -Sequential Access
    .하나의 블록에서 순차적으로 읽는다
    .Index Leaf Block 읽을 때 / Full Scan 할 때
    .적은비용
    .Full Scan 일 경우 Multi-Block I/O 가능
   -Random Access
    .주로 하나의 블록에서 하나의 레코드만 읽는다
    .효율이 낮다 / 높은 비용
    .Rowid이용 테이블 액세스
    .DBA를 이용한 인덱스 수직적 탐색
    .클러스터링팩터가 낮을때 높은 성능
    .Single Block I/O

6. 탐색비용
    - 테이블 Random Access > 수직적탐색 > 수평적탐색

7. 인덱스 사용이 불가능 하거나 범위스캔(Range Scan)이 불가능한 경우
   - 인덱스 컬럼의 가공
   - Null의 검색
   - 묵시적 형변환
   - 부정검색

8. 인덱스 스캔방식
    - Index Range Scan
    - Index Full Scan
    - Index Unique Scan
    - Index Skip Scan
    - In-List Iterator
    - Index Fast Full Scan
    - Index Range Scan Descending
    - Index Combine

9. Index Range Scan 튜닝 포인트
   - 인덱스 스캔하는 범위를 얼마나 줄일 수 있는가?
   - 테이블로 액세스 하는 회수를 얼만큼 줄일 수 있는가?

10. Index Full Scan
   - 적당한 인덱스가 없을 경우 Table Full Scan 수행
   ※ 최종 결과 값이 적을 때 Full Table Scan 보다 Index Full Scan이 효율적이다.
       최종 결과 값이 많을 때 Full Table Scan 이 효율적이다.

11. Index Unique Scan
   - 수직적 스캔만 발생
   - = 조건일 경우만 사용

12. Index Skip Scan 
   - 최초 범위 검색후 다음 범위 검색시 Jump할 때, 루트까지 올라가지 않고
     브랜치 중간에서 리프(Leaf) 노드로 다시 검색하며 내려감

   - 인덱스 선두 컬럼의 Distinct 가 매우낮을 때 사용
   - 인덱스 선두 컬럼이 Between, Like, 부등호 일 때도 사용 가능

13. Index Fast Full Scan
   -  전체 Index를 Full Scan
   - Multi-Block I/O
   - 파라미터의 db_file_multiblock_read_count 개수만큼 한번에 Read
  
   - Index의 논리적 순서와 무관하게 물리적 순서대로 Read
   - 결과는 인덱스 키 컬럼의 순서와 무관

14. Index Full Scan / Index Fast Full Scan 비교
   - 인덱스 구조를 따라 스캔            / 세그먼트 전체를 스캔
   - 결과집합 순서 보장                   / 결과집합 순서 보장 안됨
   - Single Block I/O                        / Multi Block I/O
   - 병렬스캔 불가 (파티션시 가능)   / 병렬스캔 가능
   - 엔덱스에 포함되지 않은 컬럼 조회시에도 사용가능 / 인덱스에 포함된 컬럼으로만 조회할 때 사용가능

15. Oracle DBMS 구조
   - <별도파일 참고>

16. 로그버퍼
   - DB 복구 시 재 실행하기 위해 필요한 정보
   - DML 발생 시 DB Buffer Cache 보다 앞서 저장
   - User Commit 등의 상황에 Redo Log File에 저장

   ※ Append 방식으로 소량의 Write 만으로 데이터 정합성 보장 가능 -> 빠르고 적은 부하

17. 테이블 Random Access 부하
   - Random Access vs Sequential Access 

18. RowId의 구조 ('오빠불러'..)
   - 데이터 '오'브젝트 번호(6자리)
   - 데이터 '파'일 번호(3자리)
   - '블'록번호(6자리)
   - '로'우번호(3자리)

19. 락(Lock) / 래치(Latch)
   - 직렬화: SGA에서 먼저 찿는다
   - 래치: 줄 서지 않는다 (먼저잡는게 임자)
   - 2000번 시도후 못잡으면 sleep
   - select * from v$session_wait

   - Latch 획득의 부하(Cache Buffer Chain Latch)
   - Buffer Block ,대기 (Buffer Busy Wait)
   - LRU 알고리증에 의해 메모리에서 Age Out 되었을 경우 LRU Latch 획득 필요

20. Buffer Pinning  -- Logical Read Count로 잡히지 않음
      다음 번 Read 시 현재 읽은 동일 Block을 Read 할 경우 대상 Block이 Age-Out 되지 않도록 Pin을
      걸어두고, 해당 주소인 DBA(DB Block Address)가 가리키는 메모리 번지수를 PGA에 저장하여 바로
      찾아가는 기법

      ※ Dirty버퍼, Pinned버퍼 - 에이징 아웃 불가
          Free버퍼 - 에이징 아웃 가능

21. Clustering Factor_1
     C.F 좋을때                      / C.F 나쁠때
   - 블럭 수에 근접                / 로우 수에 근접
   - 랜덤 액세스 효율이 좋다  / 랜덤 액세스 효율이 나쁘다
   - 버퍼 Pinning 효과로 인해 Random I/O(Logical Read) 미발생  


22. Clustering Factor_2   
    -비용[Cost] = blevel +                                                  -- 인덱스 수직적 탐색 비용
                        [리프 블록 수 * 유효 인덱스 선택도] +      -- 인텍스 수평적 탐색 비용
                        [클러스터링 팩터 * 유효 테이블 선택도]   -- 테이블 Random 액세스 비용
    ※ blevel: 리프 블록에 도달하기 전까지 읽게 될 루트 및 브랜치 블록개수
    ※ 유효 인덱스 선택도: 전체 인덱스 레코드 중에서 조건절을 만족하는 레코드를 찾기 위해 스캔 할
                                      것으로 예상 되는 비율(%)
    ※ 유효 테이블 선택도: 전체 레코드 중에서 인덱스 스캔을 완료하고서 최종적으로 테이블을 방문 할
                                      것으로 예상되는 비율(%)

23. Table Full Scan 과 Index Scan의 손익 분기점
     - 통상적으로 찾고자 하는 레코드가 전체 용량 대비 10%라 하나, 항상 그렇지는 않음
     - 정확히 말해 C.F(클러스터링 팩터)에 의해 좌우
     - C.F를 극복하기 위해
        . SQL Server- Clustered Index
        . Oracle의 Clustered Index, IOT 존재

24. I/O 튜닝의 핵심 원리
     - Sequential 액세스의 선택도를 높인다
     - Random 액세스 발생량을 줄인다.

    ※ 인덱스 컬럼 추가
    ※ 인덱스만 읽고 처리토록 

        <부서코드 + 성명 + 퇴사여부>

         SELECT 부서코드, 성명, 퇴사여부
            FROM 사원
          WHERE 부서코드 = '1000'
              AND 성명        = '홍길동'
    
25. IOT (Index Orgarnized Table)
     -                                                   Heap Table    /  IOT
      . 인덱스를 이용한 테이블 Search:  RowId            /  해당없음
      . PK                                          : Key + RowId    / Key 
      . Secondary Key                         : Key + RowID    / Key + PK
      . 테이블의 RowId 변화                : 비 휘발성       / 휘발성 (Index Split 때문) 
      . 속도                                        : C.F 따라 상이 / PK조회: 매우 높음           
                                                                                Secondary Index: 낮음
      . 이미지

26. IOT (Index Orgarnized Table)-2
     - IOT의 활용
      .크기가 작고 NL 조인으로 반복 룩업(Lookup) 하는 테이블     
      .폭이좁고 긴 테이블 -- 컬러수가 적고 Row수가 많은 테이블
      .넓은 범위를 주로 검색하는 테이블
      .테이터 입력과 조회 패턴이 서로 다른 테이블
      ※ OLTP에서는 사용X,  DW에서 많이 사용
 
27. 인덱스 매칭도-1
    - 결합 인덱스 우선순위 결정
     .항상(자주) 사용되는 가?
     . "=" 조건
     . Cardinality(분포도)
     . 소트연산 대체

28. 인덱스 매칭도-2 
     - <별도파일 참고>

29. Predicate Information (access 및 filter 조건)

   --------+----------------------------+--------------------------------------------
               :  Table                                 :   Index
   --------+----------------------------+--------------------------------------------
   Access :     X                                    :  Driving Index 범위를 줄이는데 기여하였는지
   --------+----------------------------+--------------------------------------------
    Filter    : 테이블에서 Filtering하였는지 : Index를 사용하였으나 Check 조건으로 활용
   --------+----------------------------+--------------------------------------------

30. 튜닝툴
   - Trace
   - auto trace
   - xPlan

31. auto trace 설정
 -----------------------------------+----------+---------------+---------+------------
        옵션                                       : SQL 실행 : SQL 결과 출력 : 실행계획 : 실행통계
 -----------------------------------+----------+---------------+---------+------------
  Set autottrace on                            :      O       :          O           :     O       :     O
  Set autottrace on explain                 :     O       :           O           :     O       :      
  Set autottrace on statistics              :     O       :           O           :              :     O
  Set autottrace on traceonly              :     O       :                        :     O       :     O
  Set autottrace on traceonly explain   :              :                        :     O       :      
  Set autottrace on traceonly statistics :     O       :                        :              :     O
 -----------------------------------+----------+---------------+---------+------------
 ※ 'SQL 실행'이 되어야 '실행통계' 나옴
  

 32. xPLAN
  ① 세션 정보 수정
    .ALTER SESSION SET STATISTICS_LEVEL=ALL 
  ② SQL 수행
  ③ 결과 조회
    . SELECT * FROM TABLE[DBMS_XPLAN.DISPLAY_CURSOR(NULL,NULL,'ALLSTATS LAST'));